// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.15.8
// source: worker/gdalservice/gdalservice.proto

package gdalservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GeoRPCGranule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation        string    `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
	Path             string    `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Geometry         string    `protobuf:"bytes,3,opt,name=geometry,proto3" json:"geometry,omitempty"`
	Bands            []int32   `protobuf:"varint,4,rep,packed,name=bands,proto3" json:"bands,omitempty"`
	Height           float32   `protobuf:"fixed32,5,opt,name=height,proto3" json:"height,omitempty"`
	Width            float32   `protobuf:"fixed32,6,opt,name=width,proto3" json:"width,omitempty"`
	SrcSRS           string    `protobuf:"bytes,7,opt,name=srcSRS,proto3" json:"srcSRS,omitempty"`
	SrcGeot          []float64 `protobuf:"fixed64,8,rep,packed,name=srcGeot,proto3" json:"srcGeot,omitempty"`
	DstSRS           string    `protobuf:"bytes,9,opt,name=dstSRS,proto3" json:"dstSRS,omitempty"`
	DstGeot          []float64 `protobuf:"fixed64,10,rep,packed,name=dstGeot,proto3" json:"dstGeot,omitempty"`
	BandStrides      int32     `protobuf:"varint,11,opt,name=bandStrides,proto3" json:"bandStrides,omitempty"`
	GeoLocOpts       []string  `protobuf:"bytes,12,rep,name=geoLocOpts,proto3" json:"geoLocOpts,omitempty"`
	DrillDecileCount int32     `protobuf:"varint,13,opt,name=drillDecileCount,proto3" json:"drillDecileCount,omitempty"`
	ClipUpper        float32   `protobuf:"fixed32,14,opt,name=clipUpper,proto3" json:"clipUpper,omitempty"`
	ClipLower        float32   `protobuf:"fixed32,15,opt,name=clipLower,proto3" json:"clipLower,omitempty"`
	SRSCf            int32     `protobuf:"varint,16,opt,name=sRSCf,proto3" json:"sRSCf,omitempty"`
	PixelCount       int32     `protobuf:"varint,17,opt,name=pixelCount,proto3" json:"pixelCount,omitempty"`
	PixelStat        string    `protobuf:"bytes,18,opt,name=pixelStat,proto3" json:"pixelStat,omitempty"`
	VRT              string    `protobuf:"bytes,19,opt,name=vRT,proto3" json:"vRT,omitempty"`
}

func (x *GeoRPCGranule) Reset() {
	*x = GeoRPCGranule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_gdalservice_gdalservice_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoRPCGranule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoRPCGranule) ProtoMessage() {}

func (x *GeoRPCGranule) ProtoReflect() protoreflect.Message {
	mi := &file_worker_gdalservice_gdalservice_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoRPCGranule.ProtoReflect.Descriptor instead.
func (*GeoRPCGranule) Descriptor() ([]byte, []int) {
	return file_worker_gdalservice_gdalservice_proto_rawDescGZIP(), []int{0}
}

func (x *GeoRPCGranule) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *GeoRPCGranule) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *GeoRPCGranule) GetGeometry() string {
	if x != nil {
		return x.Geometry
	}
	return ""
}

func (x *GeoRPCGranule) GetBands() []int32 {
	if x != nil {
		return x.Bands
	}
	return nil
}

func (x *GeoRPCGranule) GetHeight() float32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *GeoRPCGranule) GetWidth() float32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *GeoRPCGranule) GetSrcSRS() string {
	if x != nil {
		return x.SrcSRS
	}
	return ""
}

func (x *GeoRPCGranule) GetSrcGeot() []float64 {
	if x != nil {
		return x.SrcGeot
	}
	return nil
}

func (x *GeoRPCGranule) GetDstSRS() string {
	if x != nil {
		return x.DstSRS
	}
	return ""
}

func (x *GeoRPCGranule) GetDstGeot() []float64 {
	if x != nil {
		return x.DstGeot
	}
	return nil
}

func (x *GeoRPCGranule) GetBandStrides() int32 {
	if x != nil {
		return x.BandStrides
	}
	return 0
}

func (x *GeoRPCGranule) GetGeoLocOpts() []string {
	if x != nil {
		return x.GeoLocOpts
	}
	return nil
}

func (x *GeoRPCGranule) GetDrillDecileCount() int32 {
	if x != nil {
		return x.DrillDecileCount
	}
	return 0
}

func (x *GeoRPCGranule) GetClipUpper() float32 {
	if x != nil {
		return x.ClipUpper
	}
	return 0
}

func (x *GeoRPCGranule) GetClipLower() float32 {
	if x != nil {
		return x.ClipLower
	}
	return 0
}

func (x *GeoRPCGranule) GetSRSCf() int32 {
	if x != nil {
		return x.SRSCf
	}
	return 0
}

func (x *GeoRPCGranule) GetPixelCount() int32 {
	if x != nil {
		return x.PixelCount
	}
	return 0
}

func (x *GeoRPCGranule) GetPixelStat() string {
	if x != nil {
		return x.PixelStat
	}
	return ""
}

func (x *GeoRPCGranule) GetVRT() string {
	if x != nil {
		return x.VRT
	}
	return ""
}

type Raster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data       []byte  `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	NoData     float64 `protobuf:"fixed64,2,opt,name=noData,proto3" json:"noData,omitempty"`
	RasterType string  `protobuf:"bytes,3,opt,name=rasterType,proto3" json:"rasterType,omitempty"`
	Bbox       []int32 `protobuf:"varint,4,rep,packed,name=bbox,proto3" json:"bbox,omitempty"`
	Mask       []int32 `protobuf:"varint,5,rep,packed,name=mask,proto3" json:"mask,omitempty"`
}

func (x *Raster) Reset() {
	*x = Raster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_gdalservice_gdalservice_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Raster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Raster) ProtoMessage() {}

func (x *Raster) ProtoReflect() protoreflect.Message {
	mi := &file_worker_gdalservice_gdalservice_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Raster.ProtoReflect.Descriptor instead.
func (*Raster) Descriptor() ([]byte, []int) {
	return file_worker_gdalservice_gdalservice_proto_rawDescGZIP(), []int{1}
}

func (x *Raster) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Raster) GetNoData() float64 {
	if x != nil {
		return x.NoData
	}
	return 0
}

func (x *Raster) GetRasterType() string {
	if x != nil {
		return x.RasterType
	}
	return ""
}

func (x *Raster) GetBbox() []int32 {
	if x != nil {
		return x.Bbox
	}
	return nil
}

func (x *Raster) GetMask() []int32 {
	if x != nil {
		return x.Mask
	}
	return nil
}

type TimeSeries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Count int32   `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *TimeSeries) Reset() {
	*x = TimeSeries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_gdalservice_gdalservice_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeSeries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeSeries) ProtoMessage() {}

func (x *TimeSeries) ProtoReflect() protoreflect.Message {
	mi := &file_worker_gdalservice_gdalservice_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeSeries.ProtoReflect.Descriptor instead.
func (*TimeSeries) Descriptor() ([]byte, []int) {
	return file_worker_gdalservice_gdalservice_proto_rawDescGZIP(), []int{2}
}

func (x *TimeSeries) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *TimeSeries) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type Overview struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XSize int32 `protobuf:"varint,1,opt,name=xSize,proto3" json:"xSize,omitempty"`
	YSize int32 `protobuf:"varint,2,opt,name=ySize,proto3" json:"ySize,omitempty"`
}

func (x *Overview) Reset() {
	*x = Overview{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_gdalservice_gdalservice_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Overview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Overview) ProtoMessage() {}

func (x *Overview) ProtoReflect() protoreflect.Message {
	mi := &file_worker_gdalservice_gdalservice_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Overview.ProtoReflect.Descriptor instead.
func (*Overview) Descriptor() ([]byte, []int) {
	return file_worker_gdalservice_gdalservice_proto_rawDescGZIP(), []int{3}
}

func (x *Overview) GetXSize() int32 {
	if x != nil {
		return x.XSize
	}
	return 0
}

func (x *Overview) GetYSize() int32 {
	if x != nil {
		return x.YSize
	}
	return 0
}

type GeoMetaData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetName  string                   `protobuf:"bytes,1,opt,name=datasetName,proto3" json:"datasetName,omitempty"`
	NameSpace    string                   `protobuf:"bytes,2,opt,name=nameSpace,proto3" json:"nameSpace,omitempty"`
	Type         string                   `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	RasterCount  int32                    `protobuf:"varint,4,opt,name=rasterCount,proto3" json:"rasterCount,omitempty"`
	TimeStamps   []*timestamppb.Timestamp `protobuf:"bytes,5,rep,name=timeStamps,proto3" json:"timeStamps,omitempty"`
	Height       []float64                `protobuf:"fixed64,6,rep,packed,name=height,proto3" json:"height,omitempty"`
	Overviews    []*Overview              `protobuf:"bytes,7,rep,name=overviews,proto3" json:"overviews,omitempty"`
	XSize        int32                    `protobuf:"varint,8,opt,name=xSize,proto3" json:"xSize,omitempty"`
	YSize        int32                    `protobuf:"varint,9,opt,name=ySize,proto3" json:"ySize,omitempty"`
	GeoTransform []float64                `protobuf:"fixed64,10,rep,packed,name=geoTransform,proto3" json:"geoTransform,omitempty"`
	Polygon      string                   `protobuf:"bytes,11,opt,name=polygon,proto3" json:"polygon,omitempty"`
	ProjWKT      string                   `protobuf:"bytes,12,opt,name=projWKT,proto3" json:"projWKT,omitempty"`
	Proj4        string                   `protobuf:"bytes,13,opt,name=proj4,proto3" json:"proj4,omitempty"`
}

func (x *GeoMetaData) Reset() {
	*x = GeoMetaData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_gdalservice_gdalservice_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoMetaData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoMetaData) ProtoMessage() {}

func (x *GeoMetaData) ProtoReflect() protoreflect.Message {
	mi := &file_worker_gdalservice_gdalservice_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoMetaData.ProtoReflect.Descriptor instead.
func (*GeoMetaData) Descriptor() ([]byte, []int) {
	return file_worker_gdalservice_gdalservice_proto_rawDescGZIP(), []int{4}
}

func (x *GeoMetaData) GetDatasetName() string {
	if x != nil {
		return x.DatasetName
	}
	return ""
}

func (x *GeoMetaData) GetNameSpace() string {
	if x != nil {
		return x.NameSpace
	}
	return ""
}

func (x *GeoMetaData) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GeoMetaData) GetRasterCount() int32 {
	if x != nil {
		return x.RasterCount
	}
	return 0
}

func (x *GeoMetaData) GetTimeStamps() []*timestamppb.Timestamp {
	if x != nil {
		return x.TimeStamps
	}
	return nil
}

func (x *GeoMetaData) GetHeight() []float64 {
	if x != nil {
		return x.Height
	}
	return nil
}

func (x *GeoMetaData) GetOverviews() []*Overview {
	if x != nil {
		return x.Overviews
	}
	return nil
}

func (x *GeoMetaData) GetXSize() int32 {
	if x != nil {
		return x.XSize
	}
	return 0
}

func (x *GeoMetaData) GetYSize() int32 {
	if x != nil {
		return x.YSize
	}
	return 0
}

func (x *GeoMetaData) GetGeoTransform() []float64 {
	if x != nil {
		return x.GeoTransform
	}
	return nil
}

func (x *GeoMetaData) GetPolygon() string {
	if x != nil {
		return x.Polygon
	}
	return ""
}

func (x *GeoMetaData) GetProjWKT() string {
	if x != nil {
		return x.ProjWKT
	}
	return ""
}

func (x *GeoMetaData) GetProj4() string {
	if x != nil {
		return x.Proj4
	}
	return ""
}

type GeoFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName string         `protobuf:"bytes,1,opt,name=fileName,proto3" json:"fileName,omitempty"`
	Driver   string         `protobuf:"bytes,2,opt,name=driver,proto3" json:"driver,omitempty"`
	DataSets []*GeoMetaData `protobuf:"bytes,3,rep,name=dataSets,proto3" json:"dataSets,omitempty"`
}

func (x *GeoFile) Reset() {
	*x = GeoFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_gdalservice_gdalservice_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoFile) ProtoMessage() {}

func (x *GeoFile) ProtoReflect() protoreflect.Message {
	mi := &file_worker_gdalservice_gdalservice_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoFile.ProtoReflect.Descriptor instead.
func (*GeoFile) Descriptor() ([]byte, []int) {
	return file_worker_gdalservice_gdalservice_proto_rawDescGZIP(), []int{5}
}

func (x *GeoFile) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *GeoFile) GetDriver() string {
	if x != nil {
		return x.Driver
	}
	return ""
}

func (x *GeoFile) GetDataSets() []*GeoMetaData {
	if x != nil {
		return x.DataSets
	}
	return nil
}

type WorkerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoolSize int32 `protobuf:"varint,1,opt,name=poolSize,proto3" json:"poolSize,omitempty"`
}

func (x *WorkerInfo) Reset() {
	*x = WorkerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_gdalservice_gdalservice_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerInfo) ProtoMessage() {}

func (x *WorkerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_worker_gdalservice_gdalservice_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerInfo.ProtoReflect.Descriptor instead.
func (*WorkerInfo) Descriptor() ([]byte, []int) {
	return file_worker_gdalservice_gdalservice_proto_rawDescGZIP(), []int{6}
}

func (x *WorkerInfo) GetPoolSize() int32 {
	if x != nil {
		return x.PoolSize
	}
	return 0
}

type WorkerMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesRead int64 `protobuf:"varint,1,opt,name=bytesRead,proto3" json:"bytesRead,omitempty"`
	UserTime  int64 `protobuf:"varint,2,opt,name=userTime,proto3" json:"userTime,omitempty"`
	SysTime   int64 `protobuf:"varint,3,opt,name=sysTime,proto3" json:"sysTime,omitempty"`
}

func (x *WorkerMetrics) Reset() {
	*x = WorkerMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_gdalservice_gdalservice_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkerMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerMetrics) ProtoMessage() {}

func (x *WorkerMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_worker_gdalservice_gdalservice_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerMetrics.ProtoReflect.Descriptor instead.
func (*WorkerMetrics) Descriptor() ([]byte, []int) {
	return file_worker_gdalservice_gdalservice_proto_rawDescGZIP(), []int{7}
}

func (x *WorkerMetrics) GetBytesRead() int64 {
	if x != nil {
		return x.BytesRead
	}
	return 0
}

func (x *WorkerMetrics) GetUserTime() int64 {
	if x != nil {
		return x.UserTime
	}
	return 0
}

func (x *WorkerMetrics) GetSysTime() int64 {
	if x != nil {
		return x.SysTime
	}
	return 0
}

type Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeSeries []*TimeSeries  `protobuf:"bytes,1,rep,name=timeSeries,proto3" json:"timeSeries,omitempty"`
	Raster     *Raster        `protobuf:"bytes,2,opt,name=raster,proto3" json:"raster,omitempty"`
	Info       *GeoFile       `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
	Error      string         `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	Shape      []int32        `protobuf:"varint,5,rep,packed,name=shape,proto3" json:"shape,omitempty"`
	WorkerInfo *WorkerInfo    `protobuf:"bytes,6,opt,name=workerInfo,proto3" json:"workerInfo,omitempty"`
	Metrics    *WorkerMetrics `protobuf:"bytes,7,opt,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *Result) Reset() {
	*x = Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_gdalservice_gdalservice_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_worker_gdalservice_gdalservice_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_worker_gdalservice_gdalservice_proto_rawDescGZIP(), []int{8}
}

func (x *Result) GetTimeSeries() []*TimeSeries {
	if x != nil {
		return x.TimeSeries
	}
	return nil
}

func (x *Result) GetRaster() *Raster {
	if x != nil {
		return x.Raster
	}
	return nil
}

func (x *Result) GetInfo() *GeoFile {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *Result) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *Result) GetShape() []int32 {
	if x != nil {
		return x.Shape
	}
	return nil
}

func (x *Result) GetWorkerInfo() *WorkerInfo {
	if x != nil {
		return x.WorkerInfo
	}
	return nil
}

func (x *Result) GetMetrics() *WorkerMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

var File_worker_gdalservice_gdalservice_proto protoreflect.FileDescriptor

var file_worker_gdalservice_gdalservice_proto_rawDesc = []byte{
	0x0a, 0x24, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2f, 0x67, 0x64, 0x61, 0x6c, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x67, 0x64, 0x61, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x67, 0x64, 0x61, 0x6c, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x95, 0x04, 0x0a, 0x0d, 0x47, 0x65, 0x6f, 0x52, 0x50, 0x43, 0x47,
	0x72, 0x61, 0x6e, 0x75, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x65, 0x6f, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x65, 0x6f, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x05, 0x62, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x72, 0x63, 0x53,
	0x52, 0x53, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x72, 0x63, 0x53, 0x52, 0x53,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x72, 0x63, 0x47, 0x65, 0x6f, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x01, 0x52, 0x07, 0x73, 0x72, 0x63, 0x47, 0x65, 0x6f, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x73,
	0x74, 0x53, 0x52, 0x53, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x73, 0x74, 0x53,
	0x52, 0x53, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x73, 0x74, 0x47, 0x65, 0x6f, 0x74, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x01, 0x52, 0x07, 0x64, 0x73, 0x74, 0x47, 0x65, 0x6f, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x62, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x72, 0x69, 0x64, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x62, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x72, 0x69, 0x64, 0x65, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x67, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x4f, 0x70, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x67, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x4f, 0x70, 0x74, 0x73, 0x12, 0x2a,
	0x0a, 0x10, 0x64, 0x72, 0x69, 0x6c, 0x6c, 0x44, 0x65, 0x63, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x64, 0x72, 0x69, 0x6c, 0x6c, 0x44,
	0x65, 0x63, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c,
	0x69, 0x70, 0x55, 0x70, 0x70, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x63,
	0x6c, 0x69, 0x70, 0x55, 0x70, 0x70, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x70,
	0x4c, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x63, 0x6c, 0x69,
	0x70, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x52, 0x53, 0x43, 0x66, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x52, 0x53, 0x43, 0x66, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x69, 0x78, 0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x69, 0x78, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x52,
	0x54, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x52, 0x54, 0x22, 0x7c, 0x0a, 0x06,
	0x52, 0x61, 0x73, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x6e, 0x6f, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x61, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x61, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x62, 0x6f, 0x78, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x04, 0x62, 0x62, 0x6f, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x22, 0x38, 0x0a, 0x0a, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x36, 0x0a, 0x08, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77,
	0x12, 0x14, 0x0a, 0x05, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xa6, 0x03, 0x0a,
	0x0b, 0x47, 0x65, 0x6f, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x72, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x01, 0x52, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x69,
	0x65, 0x77, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x64, 0x61, 0x6c,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77,
	0x52, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x78,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x78, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x65, 0x6f, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x01, 0x52, 0x0c, 0x67,
	0x65, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6f,
	0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x57, 0x4b, 0x54,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x57, 0x4b, 0x54, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6a, 0x34, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x70, 0x72, 0x6f, 0x6a, 0x34, 0x22, 0x73, 0x0a, 0x07, 0x47, 0x65, 0x6f, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x53, 0x65, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x64, 0x61, 0x6c, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x6f, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x53, 0x65, 0x74, 0x73, 0x22, 0x28, 0x0a, 0x0a, 0x57, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x6f, 0x6c,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x6f, 0x6c,
	0x53, 0x69, 0x7a, 0x65, 0x22, 0x63, 0x0a, 0x0d, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x52,
	0x65, 0x61, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x79, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x73, 0x79, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xb3, 0x02, 0x0a, 0x06, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x37, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x64, 0x61, 0x6c, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2b, 0x0a,
	0x06, 0x72, 0x61, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x67, 0x64, 0x61, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x06, 0x72, 0x61, 0x73, 0x74, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x04, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x64, 0x61, 0x6c, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68,
	0x61, 0x70, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65,
	0x12, 0x37, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x64, 0x61, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x77,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x64, 0x61,
	0x6c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x32,
	0x42, 0x0a, 0x04, 0x47, 0x44, 0x41, 0x4c, 0x12, 0x3a, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x1a, 0x2e, 0x67, 0x64, 0x61, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x6f, 0x52, 0x50, 0x43, 0x47, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x65, 0x1a, 0x13,
	0x2e, 0x67, 0x64, 0x61, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x42, 0x15, 0x5a, 0x13, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2f, 0x67,
	0x64, 0x61, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_worker_gdalservice_gdalservice_proto_rawDescOnce sync.Once
	file_worker_gdalservice_gdalservice_proto_rawDescData = file_worker_gdalservice_gdalservice_proto_rawDesc
)

func file_worker_gdalservice_gdalservice_proto_rawDescGZIP() []byte {
	file_worker_gdalservice_gdalservice_proto_rawDescOnce.Do(func() {
		file_worker_gdalservice_gdalservice_proto_rawDescData = protoimpl.X.CompressGZIP(file_worker_gdalservice_gdalservice_proto_rawDescData)
	})
	return file_worker_gdalservice_gdalservice_proto_rawDescData
}

var file_worker_gdalservice_gdalservice_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_worker_gdalservice_gdalservice_proto_goTypes = []interface{}{
	(*GeoRPCGranule)(nil),         // 0: gdalservice.GeoRPCGranule
	(*Raster)(nil),                // 1: gdalservice.Raster
	(*TimeSeries)(nil),            // 2: gdalservice.TimeSeries
	(*Overview)(nil),              // 3: gdalservice.Overview
	(*GeoMetaData)(nil),           // 4: gdalservice.GeoMetaData
	(*GeoFile)(nil),               // 5: gdalservice.GeoFile
	(*WorkerInfo)(nil),            // 6: gdalservice.WorkerInfo
	(*WorkerMetrics)(nil),         // 7: gdalservice.WorkerMetrics
	(*Result)(nil),                // 8: gdalservice.Result
	(*timestamppb.Timestamp)(nil), // 9: google.protobuf.Timestamp
}
var file_worker_gdalservice_gdalservice_proto_depIdxs = []int32{
	9, // 0: gdalservice.GeoMetaData.timeStamps:type_name -> google.protobuf.Timestamp
	3, // 1: gdalservice.GeoMetaData.overviews:type_name -> gdalservice.Overview
	4, // 2: gdalservice.GeoFile.dataSets:type_name -> gdalservice.GeoMetaData
	2, // 3: gdalservice.Result.timeSeries:type_name -> gdalservice.TimeSeries
	1, // 4: gdalservice.Result.raster:type_name -> gdalservice.Raster
	5, // 5: gdalservice.Result.info:type_name -> gdalservice.GeoFile
	6, // 6: gdalservice.Result.workerInfo:type_name -> gdalservice.WorkerInfo
	7, // 7: gdalservice.Result.metrics:type_name -> gdalservice.WorkerMetrics
	0, // 8: gdalservice.GDAL.Process:input_type -> gdalservice.GeoRPCGranule
	8, // 9: gdalservice.GDAL.Process:output_type -> gdalservice.Result
	9, // [9:10] is the sub-list for method output_type
	8, // [8:9] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_worker_gdalservice_gdalservice_proto_init() }
func file_worker_gdalservice_gdalservice_proto_init() {
	if File_worker_gdalservice_gdalservice_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_worker_gdalservice_gdalservice_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeoRPCGranule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_gdalservice_gdalservice_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Raster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_gdalservice_gdalservice_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeSeries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_gdalservice_gdalservice_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Overview); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_gdalservice_gdalservice_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeoMetaData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_gdalservice_gdalservice_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeoFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_gdalservice_gdalservice_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_gdalservice_gdalservice_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkerMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_gdalservice_gdalservice_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_worker_gdalservice_gdalservice_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_worker_gdalservice_gdalservice_proto_goTypes,
		DependencyIndexes: file_worker_gdalservice_gdalservice_proto_depIdxs,
		MessageInfos:      file_worker_gdalservice_gdalservice_proto_msgTypes,
	}.Build()
	File_worker_gdalservice_gdalservice_proto = out.File
	file_worker_gdalservice_gdalservice_proto_rawDesc = nil
	file_worker_gdalservice_gdalservice_proto_goTypes = nil
	file_worker_gdalservice_gdalservice_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GDALClient is the client API for GDAL service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GDALClient interface {
	Process(ctx context.Context, in *GeoRPCGranule, opts ...grpc.CallOption) (*Result, error)
}

type gDALClient struct {
	cc grpc.ClientConnInterface
}

func NewGDALClient(cc grpc.ClientConnInterface) GDALClient {
	return &gDALClient{cc}
}

func (c *gDALClient) Process(ctx context.Context, in *GeoRPCGranule, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/gdalservice.GDAL/Process", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GDALServer is the server API for GDAL service.
type GDALServer interface {
	Process(context.Context, *GeoRPCGranule) (*Result, error)
}

// UnimplementedGDALServer can be embedded to have forward compatible implementations.
type UnimplementedGDALServer struct {
}

func (*UnimplementedGDALServer) Process(context.Context, *GeoRPCGranule) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Process not implemented")
}

func RegisterGDALServer(s *grpc.Server, srv GDALServer) {
	s.RegisterService(&_GDAL_serviceDesc, srv)
}

func _GDAL_Process_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeoRPCGranule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GDALServer).Process(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gdalservice.GDAL/Process",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GDALServer).Process(ctx, req.(*GeoRPCGranule))
	}
	return interceptor(ctx, in, info, handler)
}

var _GDAL_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gdalservice.GDAL",
	HandlerType: (*GDALServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Process",
			Handler:    _GDAL_Process_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "worker/gdalservice/gdalservice.proto",
}
